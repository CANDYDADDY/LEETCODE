Descriptionï¼š
A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.
For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.
Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.





Solution:
class Solution:
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)==1:
            return 1
        if len(nums)==2:
            if nums[0]!=nums[1]:
                return 2
            else:
                return 0
        wigglevec=[]
        wigglevec.append(nums[0])
        for i in range(1,len(nums)):
            if i==1 and wigglevec[-1]<nums[i]:
                flag=True
                wigglevec.append(nums[i])
                continue
            if i==1 and wigglevec[-1]>nums[i]:
                flag=False
                wigglevec.append(nums[i])
                continue
            if (flag==True and nums[i]>wigglevec[-1])\
                or (flag==False and nums[i]<wigglevec[-1]):
                wigglevec[-1]=nums[i]

            if (flag==True and nums[i]<wigglevec[-1])\
                or (flag==False and nums[i]>wigglevec[-1]):
                wigglevec.append(nums[i])
                flag = not flag
        return len(wigglevec)
