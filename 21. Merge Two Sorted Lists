Description:
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
Example: 
Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

Solution:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        listlist=None
        listsum=None
        while l1 and l2:
            if l1.val<=l2.val:
                val=l1.val
                l1=l1.next
            else:
                val=l2.val
                l2=l2.next
            if listsum:
                listsum.next=ListNode(val)
                listsum=listsum.next
            else:
                listlist=listsum=ListNode(val)                
        if l1:
            while l1:
                val=l1.val
                if listsum:
                    listsum.next=ListNode(val)
                    listsum=listsum.next
                else:
                    listlist=listsum=ListNode(val)        
                l1=l1.next
        if l2:
            while l2:
                val=l2.val
                if listsum:
                    listsum.next=ListNode(val)
                    listsum=listsum.next
                else:
                    listlist=listsum=ListNode(val)
                l2=l2.next
        return listlist  
