Description：
Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping. 
Note:
You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.

Example 1:
Input: [ [1,2], [2,3], [3,4], [1,3] ]

Output: 1

Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.


Solution：
# Definition for an interval.
# class Interval:
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution:
    def eraseOverlapIntervals(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: int
        """
        tmp=sorted(intervals,key=lambda x:(x.start,x.end))
        n=len(tmp)
        i,k,ans=0,0,0
        while i<n-1:
            if tmp[i+1].start>=tmp[k].start and tmp[i+1].start<tmp[k].end:
                ans=ans+1
                if tmp[i+1].end<tmp[k].end:
                    k=i+1
            else:
                k=i+1
            i=i+1
        return ans        
